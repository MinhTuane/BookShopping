@model IEnumerable<UserMessageModel>
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Chat with Admin</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        .container {
            display: flex;
            height: 90vh;
            border: 2px solid #FF9598;
            border-radius: 20px;
            overflow: hidden;
        }

        .user-list {
            width: 30%;
            border-right: 2px solid #FF9598;
            overflow-y: auto;
            background-color: #f9f9f9;
        }

        .user {
            padding: 10px;
            border-bottom: 1px solid #FF9598;
            cursor: pointer;
        }

            .user:hover {
                background-color: #e1e1e1;
            }

            .user.active {
                background-color: #e1ffc7;
            }

        .chat-window {
            width: 70%;
            display: flex;
            flex-direction: column;
            padding: 10px;
            background-color: #fff;
        }

        #chatWindow {
            flex-grow: 1;
            overflow-y: auto;
            margin-bottom: 10px;
        }

        .message {
            display: block;
            width: fit-content;
            max-width: 70%;
            padding: 10px;
            border-radius: 10px;
            margin: 5px 0;
            word-wrap: break-word;
            border: 1px solid transparent;
            cursor: pointer;
        }

            .message.sent {
                margin-left: auto;
                background-color: #e1ffc7;
                border-color: #e1ffc7;
            }

            .message.received {
                margin-right: auto;
                background-color: #f1f1f1;
                border-color: #f1f1f1;
            }

        .sent-time {
            display: none;
            font-size: 0.8em;
            color: #888;
        }

        #sendMessageForm {
            display: flex;
            gap: 10px;
        }

            #sendMessageForm textarea {
                flex-grow: 1;
                resize: none;
                border-radius: 10px;
                padding: 10px;
            }

            #sendMessageForm button {
                align-self: center;
            }
    </style>
</head>
<body>
    <div class="container">
        <div class="user-list">
            @foreach (var user in Model)
            {
                <div class="user" data-user-id="@user.UserId" onclick="loadMessages('@user.UserId')">
                    @user.UserId
                </div>
            }
        </div>
        <div class="chat-window">
            <div id="chatWindow">
                <!-- Messages will be loaded here dynamically -->
            </div>

            <form id="sendMessageForm" asp-action="SendMessage">
                <textarea name="content" placeholder="Type your message" class="form-control" required></textarea>
                <button type="submit" class="btn btn-primary">Send</button>
            </form>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.18/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        let activeUserId = null;

        function loadMessages(userId) {
            activeUserId = userId;
            document.querySelectorAll('.user').forEach(user => {
                user.classList.remove('active');
            });
            document.querySelector(`.user[data-user-id='${userId}']`).classList.add('active');

            // Fetch and display messages for the selected user (AJAX call or similar)
            fetch(`/Chat/GetMessages?userId=${userId}`)
                .then(response => response.json())
                .then(messages => {
                    const chatWindow = document.getElementById("chatWindow");
                    chatWindow.innerHTML = '';
                    messages.forEach(message => {
                        const msg = document.createElement("div");
                        msg.className = message.senderId === '@User.Identity.Name' ? 'message sent' : 'message received';
                        msg.innerHTML = message.content + `<div class="sent-time">${message.sentAt}</div>`;
                        msg.onclick = function () { toggleTime(msg); };
                        chatWindow.appendChild(msg);
                    });
                    scrollToBottom();
                });
        }

        function scrollToBottom() {
            const chatWindow = document.getElementById("chatWindow");
            chatWindow.scrollTop = chatWindow.scrollHeight;
        }

        function toggleTime(element) {
            const timeElement = element.querySelector(".sent-time");
            if (timeElement) {
                if (timeElement.style.display === "none" || !timeElement.style.display) {
                    timeElement.style.display = "block";
                } else {
                    timeElement.style.display = "none";
                }
            }
        }

        connection.on("ReceiveMessage", (user, message, sentAt) => {
            if (user === activeUserId) {
                const msg = document.createElement("div");
                msg.className = user === '@User.Identity.Name' ? 'message sent' : 'message received';
                msg.innerHTML = message + `<div class="sent-time">${sentAt}</div>`;
                msg.onclick = function () { toggleTime(msg); };
                document.getElementById("chatWindow").appendChild(msg);
                scrollToBottom();
            }
        });

        connection.start().catch(err => console.error(err.toString()));

        // Scroll to bottom when a new message is sent
        document.getElementById("sendMessageForm").addEventListener("submit", function () {
            scrollToBottom();
        });
    </script>
</body>
</html>
